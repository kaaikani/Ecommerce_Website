export type Pred<T, K> = (input: T) => K;
export type PredIndexed<T, K> = (input: T, index: number, array: Array<T>) => K;
export type PredIndexedOptional<T, K> = (input: T, index?: number, array?: Array<T>) => K;
export type Key = string | number | symbol;
export type NonNull<T> = {
    [K in keyof T]-?: Exclude<T[K], null | undefined>;
};
export type AssertEqual<Type, Expected> = Array<Type> extends Array<Expected> ? Array<Expected> extends Array<Type> ? true : never : never;
export type NonEmptyArray<T> = [T, ...Array<T>];
//# sourceMappingURL=_types.d.ts.map