import { NonEmptyArray, PredIndexed } from './_types';
export declare function groupBy<T>(items: ReadonlyArray<T>, fn: (item: T) => PropertyKey): Record<PropertyKey, NonEmptyArray<T>>;
export declare function groupBy<T>(fn: (item: T) => PropertyKey): (array: ReadonlyArray<T>) => Record<PropertyKey, NonEmptyArray<T>>;
type Out<Value, Key extends PropertyKey = PropertyKey> = string extends Key ? Record<Key, NonEmptyArray<Value>> : number extends Key ? Record<Key, NonEmptyArray<Value>> : symbol extends Key ? Record<Key, NonEmptyArray<Value>> : Partial<Record<Key, NonEmptyArray<Value>>>;
export declare namespace groupBy {
    function indexed<T>(array: ReadonlyArray<T>, fn: PredIndexed<T, PropertyKey>): Record<string, NonEmptyArray<T>>;
    function indexed<T>(fn: PredIndexed<T, PropertyKey>): (array: ReadonlyArray<T>) => Record<string, NonEmptyArray<T>>;
    function strict<Value, Key extends PropertyKey = PropertyKey>(items: ReadonlyArray<Value>, fn: (item: Value) => Key): Out<Value, Key>;
    function strict<Value, Key extends PropertyKey = PropertyKey>(fn: (item: Value) => Key): (array: ReadonlyArray<Value>) => Out<Value, Key>;
    namespace strict {
        function indexed<Value, Key extends PropertyKey = PropertyKey>(array: ReadonlyArray<Value>, fn: PredIndexed<Value, Key>): Out<Value, Key>;
        function indexed<Value, Key extends PropertyKey = PropertyKey>(fn: PredIndexed<Value, Key>): (array: ReadonlyArray<Value>) => Out<Value, Key>;
    }
}
export {};
//# sourceMappingURL=groupBy.d.ts.map